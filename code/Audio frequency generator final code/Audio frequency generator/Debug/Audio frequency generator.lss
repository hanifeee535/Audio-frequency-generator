
Audio frequency generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000b14  00000ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800102  00800102  00000baa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000baa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087f  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006cf  00000000  00000000  00001503  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000425  00000000  00000000  00001bd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00001ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a3  00000000  00000000  00002220  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a3  00000000  00000000  000026c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002b66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 09 02 	jmp	0x412	; 0x412 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <main>
  9e:	0c 94 88 05 	jmp	0xb10	; 0xb10 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <set_up_environment>:

 char freq  [3];
 
 volatile int new_data_received = 0; 

void set_up_environment (){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	//Enabling port B pin 1 as output for Buzzer using timer 1
	DDRB |= (1<<1);
  ae:	84 e2       	ldi	r24, 0x24	; 36
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	24 e2       	ldi	r18, 0x24	; 36
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	f9 01       	movw	r30, r18
  b8:	20 81       	ld	r18, Z
  ba:	22 60       	ori	r18, 0x02	; 2
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
	PORTB |= (1<<1); //setting initial value as 1
  c0:	85 e2       	ldi	r24, 0x25	; 37
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	25 e2       	ldi	r18, 0x25	; 37
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	20 81       	ld	r18, Z
  cc:	22 60       	ori	r18, 0x02	; 2
  ce:	fc 01       	movw	r30, r24
  d0:	20 83       	st	Z, r18
	
	
	//enabling port D as input
	DDRD &= ~(1<<2);  //setting port d pin 2 as input	
  d2:	8a e2       	ldi	r24, 0x2A	; 42
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	2a e2       	ldi	r18, 0x2A	; 42
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	f9 01       	movw	r30, r18
  dc:	20 81       	ld	r18, Z
  de:	2b 7f       	andi	r18, 0xFB	; 251
  e0:	fc 01       	movw	r30, r24
  e2:	20 83       	st	Z, r18
	PORTD |= (1<<2); //enabling internal pull up resistor
  e4:	8b e2       	ldi	r24, 0x2B	; 43
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	2b e2       	ldi	r18, 0x2B	; 43
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	f9 01       	movw	r30, r18
  ee:	20 81       	ld	r18, Z
  f0:	24 60       	ori	r18, 0x04	; 4
  f2:	fc 01       	movw	r30, r24
  f4:	20 83       	st	Z, r18
	
	
	//Initializing pwm with timer 0 interrupt
	DDRD |= (1<<6);
  f6:	8a e2       	ldi	r24, 0x2A	; 42
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	2a e2       	ldi	r18, 0x2A	; 42
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	f9 01       	movw	r30, r18
 100:	20 81       	ld	r18, Z
 102:	20 64       	ori	r18, 0x40	; 64
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
	TCCR0A = 0x83; //setting fast pwm on non inverting mode
 108:	84 e4       	ldi	r24, 0x44	; 68
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	23 e8       	ldi	r18, 0x83	; 131
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
	TCCR0B = 0x03; //setting 64 prescaler
 112:	85 e4       	ldi	r24, 0x45	; 69
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	23 e0       	ldi	r18, 0x03	; 3
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18
	TIMSK0 |= (1 << OCIE0A);	
 11c:	8e e6       	ldi	r24, 0x6E	; 110
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	2e e6       	ldi	r18, 0x6E	; 110
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	20 81       	ld	r18, Z
 128:	22 60       	ori	r18, 0x02	; 2
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
	
	//enabling adc interrupt
	DDRC &= ~(1<<0); //setting port c pin 0 as input
 12e:	87 e2       	ldi	r24, 0x27	; 39
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	27 e2       	ldi	r18, 0x27	; 39
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	f9 01       	movw	r30, r18
 138:	20 81       	ld	r18, Z
 13a:	2e 7f       	andi	r18, 0xFE	; 254
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADATE); // Enable ADC, enable ADC interrupt, set ADC prescaler to 128, enable auto-triggering
 140:	8a e7       	ldi	r24, 0x7A	; 122
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	2f ea       	ldi	r18, 0xAF	; 175
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
	ADMUX =  0x60; //seting reference voltage to avc and selecting channel 0 and left justified mode
 14a:	8c e7       	ldi	r24, 0x7C	; 124
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	20 e6       	ldi	r18, 0x60	; 96
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18
	ADCSRA |= (1<<6); //starting conversation 
 154:	8a e7       	ldi	r24, 0x7A	; 122
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	2a e7       	ldi	r18, 0x7A	; 122
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	f9 01       	movw	r30, r18
 15e:	20 81       	ld	r18, Z
 160:	20 64       	ori	r18, 0x40	; 64
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
	
	
	
	//USART initialization and receiver interrupt
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0) ; //enabling receiver, transmitter, receiver interrupt
 166:	81 ec       	ldi	r24, 0xC1	; 193
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	21 ec       	ldi	r18, 0xC1	; 193
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	f9 01       	movw	r30, r18
 170:	20 81       	ld	r18, Z
 172:	28 69       	ori	r18, 0x98	; 152
 174:	fc 01       	movw	r30, r24
 176:	20 83       	st	Z, r18
	UCSR0C |= (3<<UCSZ00);//setting 8 bit character size 
 178:	82 ec       	ldi	r24, 0xC2	; 194
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	22 ec       	ldi	r18, 0xC2	; 194
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	f9 01       	movw	r30, r18
 182:	20 81       	ld	r18, Z
 184:	26 60       	ori	r18, 0x06	; 6
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
	UBRR0 |= 103; //setting baud rate 9600 for 16 MHz clock frequency
 18a:	84 ec       	ldi	r24, 0xC4	; 196
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	24 ec       	ldi	r18, 0xC4	; 196
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	f9 01       	movw	r30, r18
 194:	20 81       	ld	r18, Z
 196:	31 81       	ldd	r19, Z+1	; 0x01
 198:	27 66       	ori	r18, 0x67	; 103
 19a:	fc 01       	movw	r30, r24
 19c:	31 83       	std	Z+1, r19	; 0x01
 19e:	20 83       	st	Z, r18
}
 1a0:	00 00       	nop
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <__vector_18>:

//interrupt service routine for USART receive and storing into the ring buffer
ISR (USART_RX_vect){
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	2f 93       	push	r18
 1b6:	3f 93       	push	r19
 1b8:	5f 93       	push	r21
 1ba:	6f 93       	push	r22
 1bc:	7f 93       	push	r23
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	af 93       	push	r26
 1c4:	bf 93       	push	r27
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	1f 92       	push	r1
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
	unsigned char received_data = UDR0; 
 1d4:	86 ec       	ldi	r24, 0xC6	; 198
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	fc 01       	movw	r30, r24
 1da:	80 81       	ld	r24, Z
 1dc:	89 83       	std	Y+1, r24	; 0x01
	//checking for valid input. if null character, rx bufffer will not be loaded
	if ( received_data != '\0' )
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	88 23       	and	r24, r24
 1e2:	d9 f0       	breq	.+54     	; 0x21a <__vector_18+0x72>
	{
		rx_buffer [rx_buffer_head] = received_data; //storing the byte into ring buffer
 1e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1e8:	88 2f       	mov	r24, r24
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	87 5f       	subi	r24, 0xF7	; 247
 1ee:	9e 4f       	sbci	r25, 0xFE	; 254
 1f0:	29 81       	ldd	r18, Y+1	; 0x01
 1f2:	fc 01       	movw	r30, r24
 1f4:	20 83       	st	Z, r18
		rx_buffer_head = (rx_buffer_head +1) % BUFFER_SIZE;
 1f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1fa:	88 2f       	mov	r24, r24
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	23 e0       	ldi	r18, 0x03	; 3
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	b9 01       	movw	r22, r18
 206:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__divmodhi4>
 20a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		new_data_received = 1; 
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <new_data_received+0x1>
 216:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <new_data_received>
	}
	
}
 21a:	00 00       	nop
 21c:	0f 90       	pop	r0
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	7f 91       	pop	r23
 230:	6f 91       	pop	r22
 232:	5f 91       	pop	r21
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <frequency_read>:

//reading frequency from rx buffer and converting to integer
uint16_t frequency_read (){
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
	//convert buffer data to integer
	return atoi((char*)rx_buffer);
 24c:	89 e0       	ldi	r24, 0x09	; 9
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 22 05 	call	0xa44	; 0xa44 <atoi>
	
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <usart_send_data>:

void usart_send_data (unsigned char data ){
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	1f 92       	push	r1
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62
 264:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A &(1<<UDRE0))); //checking if UDRE register is 1 or not. if 1, it will
 266:	00 00       	nop
 268:	80 ec       	ldi	r24, 0xC0	; 192
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	fc 01       	movw	r30, r24
 26e:	80 81       	ld	r24, Z
 270:	88 2f       	mov	r24, r24
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	80 72       	andi	r24, 0x20	; 32
 276:	99 27       	eor	r25, r25
 278:	89 2b       	or	r24, r25
 27a:	b1 f3       	breq	.-20     	; 0x268 <usart_send_data+0xe>
	//indicate the udre buffer is empty. so ready to be written
	//_delay_ms (100);
	UDR0 = data;
 27c:	86 ec       	ldi	r24, 0xC6	; 198
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	29 81       	ldd	r18, Y+1	; 0x01
 282:	fc 01       	movw	r30, r24
 284:	20 83       	st	Z, r18
	
}
 286:	00 00       	nop
 288:	0f 90       	pop	r0
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <timer2_int>:


//initializing timer 2 for timer interrupt to update the frequency in every 2 seconds

void timer2_int (){
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
	TCCR2A |= (1<<WGM21); //configure timer 2 for ctc mode 
 298:	80 eb       	ldi	r24, 0xB0	; 176
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	20 eb       	ldi	r18, 0xB0	; 176
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	f9 01       	movw	r30, r18
 2a2:	20 81       	ld	r18, Z
 2a4:	22 60       	ori	r18, 0x02	; 2
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18
	OCR2A = 255; //set compare value for maximum time. It will generate a 0.016 s delay
 2aa:	83 eb       	ldi	r24, 0xB3	; 179
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 83       	st	Z, r18
	TIMSK2 |= (1<<OCIE2A); //enable timer compare interrupt
 2b4:	80 e7       	ldi	r24, 0x70	; 112
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	20 e7       	ldi	r18, 0x70	; 112
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	f9 01       	movw	r30, r18
 2be:	20 81       	ld	r18, Z
 2c0:	22 60       	ori	r18, 0x02	; 2
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 83       	st	Z, r18
	TCCR2B |= (1<<CS22) | (1<<CS21) | (1<<CS20); //set prescaler to 1024
 2c6:	81 eb       	ldi	r24, 0xB1	; 177
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	21 eb       	ldi	r18, 0xB1	; 177
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	f9 01       	movw	r30, r18
 2d0:	20 81       	ld	r18, Z
 2d2:	27 60       	ori	r18, 0x07	; 7
 2d4:	fc 01       	movw	r30, r24
 2d6:	20 83       	st	Z, r18
}
 2d8:	00 00       	nop
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <__vector_7>:

//timer2 interrupt service routine. I will update the frequency value in every 2 seconds
ISR (TIMER2_COMPA_vect){
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	2f 93       	push	r18
 2ee:	3f 93       	push	r19
 2f0:	4f 93       	push	r20
 2f2:	5f 93       	push	r21
 2f4:	6f 93       	push	r22
 2f6:	7f 93       	push	r23
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	af 93       	push	r26
 2fe:	bf 93       	push	r27
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	00 d0       	rcall	.+0      	; 0x30a <__vector_7+0x2a>
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
	timer2_ms +=1; 
 30e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timer2_ms>
 312:	8f 5f       	subi	r24, 0xFF	; 255
 314:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <timer2_ms>
	if (timer2_ms == 124)  //here, 0.016s *124 = 2s
 318:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <timer2_ms>
 31c:	8c 37       	cpi	r24, 0x7C	; 124
 31e:	09 f0       	breq	.+2      	; 0x322 <__vector_7+0x42>
 320:	61 c0       	rjmp	.+194    	; 0x3e4 <__vector_7+0x104>
	{
		//if new data received from usart, frequency will be changed from usard data
		if (new_data_received)
 322:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <new_data_received>
 326:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <new_data_received+0x1>
 32a:	89 2b       	or	r24, r25
 32c:	59 f0       	breq	.+22     	; 0x344 <__vector_7+0x64>
		{
			current_frequency = frequency_read();
 32e:	0e 94 22 01 	call	0x244	; 0x244 <frequency_read>
 332:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 336:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			new_data_received = 0; 
 33a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <new_data_received+0x1>
 33e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <new_data_received>
 342:	2c c0       	rjmp	.+88     	; 0x39c <__vector_7+0xbc>
		}
		
		//otherwise, frequency will follow the adc value
		else {
			current_frequency = 50+ ( (3.72) *adcVal ) ; // here, max adc value is 255 and frequency limit is 
 344:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <adcVal>
 348:	88 2f       	mov	r24, r24
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	09 2e       	mov	r0, r25
 34e:	00 0c       	add	r0, r0
 350:	aa 0b       	sbc	r26, r26
 352:	bb 0b       	sbc	r27, r27
 354:	bc 01       	movw	r22, r24
 356:	cd 01       	movw	r24, r26
 358:	0e 94 01 04 	call	0x802	; 0x802 <__floatsisf>
 35c:	dc 01       	movw	r26, r24
 35e:	cb 01       	movw	r24, r22
 360:	2b e7       	ldi	r18, 0x7B	; 123
 362:	34 e1       	ldi	r19, 0x14	; 20
 364:	4e e6       	ldi	r20, 0x6E	; 110
 366:	50 e4       	ldi	r21, 0x40	; 64
 368:	bc 01       	movw	r22, r24
 36a:	cd 01       	movw	r24, r26
 36c:	0e 94 8d 04 	call	0x91a	; 0x91a <__mulsf3>
 370:	dc 01       	movw	r26, r24
 372:	cb 01       	movw	r24, r22
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	48 e4       	ldi	r20, 0x48	; 72
 37a:	52 e4       	ldi	r21, 0x42	; 66
 37c:	bc 01       	movw	r22, r24
 37e:	cd 01       	movw	r24, r26
 380:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__addsf3>
 384:	dc 01       	movw	r26, r24
 386:	cb 01       	movw	r24, r22
 388:	bc 01       	movw	r22, r24
 38a:	cd 01       	movw	r24, r26
 38c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__fixunssfsi>
 390:	dc 01       	movw	r26, r24
 392:	cb 01       	movw	r24, r22
 394:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 398:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			// 50 to 1000. so, frequency increasing factor = 950/255 = 3.72.  
		}
		
		 
		//converting frequency to character so that frequency can be shown to the terminal using tx of usart
		itoa(current_frequency, freq, 10);
 39c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3a4:	4a e0       	ldi	r20, 0x0A	; 10
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	66 e0       	ldi	r22, 0x06	; 6
 3aa:	71 e0       	ldi	r23, 0x01	; 1
 3ac:	0e 94 40 05 	call	0xa80	; 0xa80 <itoa>
		for ( int i = 0; freq[i]!= '\0'; ++i )
 3b0:	1a 82       	std	Y+2, r1	; 0x02
 3b2:	19 82       	std	Y+1, r1	; 0x01
 3b4:	0d c0       	rjmp	.+26     	; 0x3d0 <__vector_7+0xf0>
		{
			usart_send_data( freq [i]);;
 3b6:	89 81       	ldd	r24, Y+1	; 0x01
 3b8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ba:	8a 5f       	subi	r24, 0xFA	; 250
 3bc:	9e 4f       	sbci	r25, 0xFE	; 254
 3be:	fc 01       	movw	r30, r24
 3c0:	80 81       	ld	r24, Z
 3c2:	0e 94 2d 01 	call	0x25a	; 0x25a <usart_send_data>
		}
		
		 
		//converting frequency to character so that frequency can be shown to the terminal using tx of usart
		itoa(current_frequency, freq, 10);
		for ( int i = 0; freq[i]!= '\0'; ++i )
 3c6:	89 81       	ldd	r24, Y+1	; 0x01
 3c8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	9a 83       	std	Y+2, r25	; 0x02
 3ce:	89 83       	std	Y+1, r24	; 0x01
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	9a 81       	ldd	r25, Y+2	; 0x02
 3d4:	8a 5f       	subi	r24, 0xFA	; 250
 3d6:	9e 4f       	sbci	r25, 0xFE	; 254
 3d8:	fc 01       	movw	r30, r24
 3da:	80 81       	ld	r24, Z
 3dc:	88 23       	and	r24, r24
 3de:	59 f7       	brne	.-42     	; 0x3b6 <__vector_7+0xd6>
		{
			usart_send_data( freq [i]);;
		}
		
		timer2_ms = 0;
 3e0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timer2_ms>
	}
}
 3e4:	00 00       	nop
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	ff 91       	pop	r31
 3f0:	ef 91       	pop	r30
 3f2:	bf 91       	pop	r27
 3f4:	af 91       	pop	r26
 3f6:	9f 91       	pop	r25
 3f8:	8f 91       	pop	r24
 3fa:	7f 91       	pop	r23
 3fc:	6f 91       	pop	r22
 3fe:	5f 91       	pop	r21
 400:	4f 91       	pop	r20
 402:	3f 91       	pop	r19
 404:	2f 91       	pop	r18
 406:	0f 90       	pop	r0
 408:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 40c:	0f 90       	pop	r0
 40e:	1f 90       	pop	r1
 410:	18 95       	reti

00000412 <__vector_21>:


//adc interrupt service routine
ISR(ADC_vect) {
 412:	1f 92       	push	r1
 414:	0f 92       	push	r0
 416:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 41a:	0f 92       	push	r0
 41c:	11 24       	eor	r1, r1
 41e:	2f 93       	push	r18
 420:	3f 93       	push	r19
 422:	8f 93       	push	r24
 424:	9f 93       	push	r25
 426:	ef 93       	push	r30
 428:	ff 93       	push	r31
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	cd b7       	in	r28, 0x3d	; 61
 430:	de b7       	in	r29, 0x3e	; 62
	adcVal = ADCH; // Read ADC value
 432:	89 e7       	ldi	r24, 0x79	; 121
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	fc 01       	movw	r30, r24
 438:	80 81       	ld	r24, Z
 43a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <adcVal>
	ADCSRA |= (1<<6); //starting conversation 
 43e:	8a e7       	ldi	r24, 0x7A	; 122
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	2a e7       	ldi	r18, 0x7A	; 122
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	f9 01       	movw	r30, r18
 448:	20 81       	ld	r18, Z
 44a:	20 64       	ori	r18, 0x40	; 64
 44c:	fc 01       	movw	r30, r24
 44e:	20 83       	st	Z, r18
}
 450:	00 00       	nop
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	3f 91       	pop	r19
 460:	2f 91       	pop	r18
 462:	0f 90       	pop	r0
 464:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <__vector_14>:


//pwm interrupt service routine
ISR(TIMER0_COMPA_vect) {
 46e:	1f 92       	push	r1
 470:	0f 92       	push	r0
 472:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 476:	0f 92       	push	r0
 478:	11 24       	eor	r1, r1
 47a:	2f 93       	push	r18
 47c:	8f 93       	push	r24
 47e:	9f 93       	push	r25
 480:	ef 93       	push	r30
 482:	ff 93       	push	r31
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
	OCR0A = adcVal; // Update duty cycle
 48c:	87 e4       	ldi	r24, 0x47	; 71
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <adcVal>
 494:	fc 01       	movw	r30, r24
 496:	20 83       	st	Z, r18
}
 498:	00 00       	nop
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	ff 91       	pop	r31
 4a0:	ef 91       	pop	r30
 4a2:	9f 91       	pop	r25
 4a4:	8f 91       	pop	r24
 4a6:	2f 91       	pop	r18
 4a8:	0f 90       	pop	r0
 4aa:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <frequency_generation>:



//frequency generation for sounder using timer 1 in normal mode
void frequency_generation (uint16_t frequency){
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	28 97       	sbiw	r28, 0x08	; 8
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	de bf       	out	0x3e, r29	; 62
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	cd bf       	out	0x3d, r28	; 61
 4c8:	98 87       	std	Y+8, r25	; 0x08
 4ca:	8f 83       	std	Y+7, r24	; 0x07
	float on_time = 1.0 / (frequency * 2);  // time period divided by 2 of desired frequency
 4cc:	8f 81       	ldd	r24, Y+7	; 0x07
 4ce:	98 85       	ldd	r25, Y+8	; 0x08
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	cc 01       	movw	r24, r24
 4d6:	a0 e0       	ldi	r26, 0x00	; 0
 4d8:	b0 e0       	ldi	r27, 0x00	; 0
 4da:	bc 01       	movw	r22, r24
 4dc:	cd 01       	movw	r24, r26
 4de:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__floatunsisf>
 4e2:	dc 01       	movw	r26, r24
 4e4:	cb 01       	movw	r24, r22
 4e6:	9c 01       	movw	r18, r24
 4e8:	ad 01       	movw	r20, r26
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	80 e8       	ldi	r24, 0x80	; 128
 4f0:	9f e3       	ldi	r25, 0x3F	; 63
 4f2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__divsf3>
 4f6:	dc 01       	movw	r26, r24
 4f8:	cb 01       	movw	r24, r22
 4fa:	89 83       	std	Y+1, r24	; 0x01
 4fc:	9a 83       	std	Y+2, r25	; 0x02
 4fe:	ab 83       	std	Y+3, r26	; 0x03
 500:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t ticks = (uint16_t)((on_time * F_CPU) / 64); // Calculate number of ticks
 502:	20 e0       	ldi	r18, 0x00	; 0
 504:	34 e2       	ldi	r19, 0x24	; 36
 506:	44 e7       	ldi	r20, 0x74	; 116
 508:	5b e4       	ldi	r21, 0x4B	; 75
 50a:	69 81       	ldd	r22, Y+1	; 0x01
 50c:	7a 81       	ldd	r23, Y+2	; 0x02
 50e:	8b 81       	ldd	r24, Y+3	; 0x03
 510:	9c 81       	ldd	r25, Y+4	; 0x04
 512:	0e 94 8d 04 	call	0x91a	; 0x91a <__mulsf3>
 516:	dc 01       	movw	r26, r24
 518:	cb 01       	movw	r24, r22
 51a:	20 e0       	ldi	r18, 0x00	; 0
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	40 e8       	ldi	r20, 0x80	; 128
 520:	52 e4       	ldi	r21, 0x42	; 66
 522:	bc 01       	movw	r22, r24
 524:	cd 01       	movw	r24, r26
 526:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__divsf3>
 52a:	dc 01       	movw	r26, r24
 52c:	cb 01       	movw	r24, r22
 52e:	bc 01       	movw	r22, r24
 530:	cd 01       	movw	r24, r26
 532:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__fixunssfsi>
 536:	dc 01       	movw	r26, r24
 538:	cb 01       	movw	r24, r22
 53a:	9e 83       	std	Y+6, r25	; 0x06
 53c:	8d 83       	std	Y+5, r24	; 0x05
	
	TCNT1 = 0xFFFF - ticks; // Set initial value for TCNT1
 53e:	84 e8       	ldi	r24, 0x84	; 132
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	2d 81       	ldd	r18, Y+5	; 0x05
 544:	3e 81       	ldd	r19, Y+6	; 0x06
 546:	20 95       	com	r18
 548:	30 95       	com	r19
 54a:	fc 01       	movw	r30, r24
 54c:	31 83       	std	Z+1, r19	; 0x01
 54e:	20 83       	st	Z, r18
	TCCR1A = 0x00;
 550:	80 e8       	ldi	r24, 0x80	; 128
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	fc 01       	movw	r30, r24
 556:	10 82       	st	Z, r1
	TCCR1B |= (1<<CS11) | (1<<CS10); // configuring for 64 clock prescaling
 558:	81 e8       	ldi	r24, 0x81	; 129
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	21 e8       	ldi	r18, 0x81	; 129
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	f9 01       	movw	r30, r18
 562:	20 81       	ld	r18, Z
 564:	23 60       	ori	r18, 0x03	; 3
 566:	fc 01       	movw	r30, r24
 568:	20 83       	st	Z, r18
	while ((TIFR1 &(1<<0)) ==0); //checking for timer 1 overflow flag to be 1
 56a:	00 00       	nop
 56c:	86 e3       	ldi	r24, 0x36	; 54
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	fc 01       	movw	r30, r24
 572:	80 81       	ld	r24, Z
 574:	88 2f       	mov	r24, r24
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	81 70       	andi	r24, 0x01	; 1
 57a:	99 27       	eor	r25, r25
 57c:	89 2b       	or	r24, r25
 57e:	b1 f3       	breq	.-20     	; 0x56c <frequency_generation+0xb8>
	//reseting the registers
	TCCR1A = 0x00;
 580:	80 e8       	ldi	r24, 0x80	; 128
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	fc 01       	movw	r30, r24
 586:	10 82       	st	Z, r1
	TCCR1B = 0x00; 
 588:	81 e8       	ldi	r24, 0x81	; 129
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	fc 01       	movw	r30, r24
 58e:	10 82       	st	Z, r1
	TIFR1 = 0x01; 
 590:	86 e3       	ldi	r24, 0x36	; 54
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	21 e0       	ldi	r18, 0x01	; 1
 596:	fc 01       	movw	r30, r24
 598:	20 83       	st	Z, r18
	
	
}
 59a:	00 00       	nop
 59c:	28 96       	adiw	r28, 0x08	; 8
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	f8 94       	cli
 5a2:	de bf       	out	0x3e, r29	; 62
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	cd bf       	out	0x3d, r28	; 61
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	08 95       	ret

000005ae <main>:


int main(void)
{
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	cd b7       	in	r28, 0x3d	; 61
 5b4:	de b7       	in	r29, 0x3e	; 62
	
	timer2_int();  //initializing timer 2 interrupt
 5b6:	0e 94 48 01 	call	0x290	; 0x290 <timer2_int>
    set_up_environment(); 
 5ba:	0e 94 53 00 	call	0xa6	; 0xa6 <set_up_environment>
	sei(); //initializing global interrrupt
 5be:	78 94       	sei
	
    while (1) 
    {
		
		
		PORTB ^= (1<<1);  //toggling the sounder output
 5c0:	85 e2       	ldi	r24, 0x25	; 37
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	25 e2       	ldi	r18, 0x25	; 37
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	f9 01       	movw	r30, r18
 5ca:	30 81       	ld	r19, Z
 5cc:	22 e0       	ldi	r18, 0x02	; 2
 5ce:	23 27       	eor	r18, r19
 5d0:	fc 01       	movw	r30, r24
 5d2:	20 83       	st	Z, r18
		frequency_generation( current_frequency); //delay according to frequency
 5d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5dc:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <frequency_generation>
		
    }
 5e0:	ef cf       	rjmp	.-34     	; 0x5c0 <main+0x12>

000005e2 <__subsf3>:
 5e2:	50 58       	subi	r21, 0x80	; 128

000005e4 <__addsf3>:
 5e4:	bb 27       	eor	r27, r27
 5e6:	aa 27       	eor	r26, r26
 5e8:	0e 94 09 03 	call	0x612	; 0x612 <__addsf3x>
 5ec:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_round>
 5f0:	0e 94 45 04 	call	0x88a	; 0x88a <__fp_pscA>
 5f4:	38 f0       	brcs	.+14     	; 0x604 <__addsf3+0x20>
 5f6:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_pscB>
 5fa:	20 f0       	brcs	.+8      	; 0x604 <__addsf3+0x20>
 5fc:	39 f4       	brne	.+14     	; 0x60c <__addsf3+0x28>
 5fe:	9f 3f       	cpi	r25, 0xFF	; 255
 600:	19 f4       	brne	.+6      	; 0x608 <__addsf3+0x24>
 602:	26 f4       	brtc	.+8      	; 0x60c <__addsf3+0x28>
 604:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_nan>
 608:	0e f4       	brtc	.+2      	; 0x60c <__addsf3+0x28>
 60a:	e0 95       	com	r30
 60c:	e7 fb       	bst	r30, 7
 60e:	0c 94 3c 04 	jmp	0x878	; 0x878 <__fp_inf>

00000612 <__addsf3x>:
 612:	e9 2f       	mov	r30, r25
 614:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_split3>
 618:	58 f3       	brcs	.-42     	; 0x5f0 <__addsf3+0xc>
 61a:	ba 17       	cp	r27, r26
 61c:	62 07       	cpc	r22, r18
 61e:	73 07       	cpc	r23, r19
 620:	84 07       	cpc	r24, r20
 622:	95 07       	cpc	r25, r21
 624:	20 f0       	brcs	.+8      	; 0x62e <__addsf3x+0x1c>
 626:	79 f4       	brne	.+30     	; 0x646 <__addsf3x+0x34>
 628:	a6 f5       	brtc	.+104    	; 0x692 <__addsf3x+0x80>
 62a:	0c 94 86 04 	jmp	0x90c	; 0x90c <__fp_zero>
 62e:	0e f4       	brtc	.+2      	; 0x632 <__addsf3x+0x20>
 630:	e0 95       	com	r30
 632:	0b 2e       	mov	r0, r27
 634:	ba 2f       	mov	r27, r26
 636:	a0 2d       	mov	r26, r0
 638:	0b 01       	movw	r0, r22
 63a:	b9 01       	movw	r22, r18
 63c:	90 01       	movw	r18, r0
 63e:	0c 01       	movw	r0, r24
 640:	ca 01       	movw	r24, r20
 642:	a0 01       	movw	r20, r0
 644:	11 24       	eor	r1, r1
 646:	ff 27       	eor	r31, r31
 648:	59 1b       	sub	r21, r25
 64a:	99 f0       	breq	.+38     	; 0x672 <__addsf3x+0x60>
 64c:	59 3f       	cpi	r21, 0xF9	; 249
 64e:	50 f4       	brcc	.+20     	; 0x664 <__addsf3x+0x52>
 650:	50 3e       	cpi	r21, 0xE0	; 224
 652:	68 f1       	brcs	.+90     	; 0x6ae <__addsf3x+0x9c>
 654:	1a 16       	cp	r1, r26
 656:	f0 40       	sbci	r31, 0x00	; 0
 658:	a2 2f       	mov	r26, r18
 65a:	23 2f       	mov	r18, r19
 65c:	34 2f       	mov	r19, r20
 65e:	44 27       	eor	r20, r20
 660:	58 5f       	subi	r21, 0xF8	; 248
 662:	f3 cf       	rjmp	.-26     	; 0x64a <__addsf3x+0x38>
 664:	46 95       	lsr	r20
 666:	37 95       	ror	r19
 668:	27 95       	ror	r18
 66a:	a7 95       	ror	r26
 66c:	f0 40       	sbci	r31, 0x00	; 0
 66e:	53 95       	inc	r21
 670:	c9 f7       	brne	.-14     	; 0x664 <__addsf3x+0x52>
 672:	7e f4       	brtc	.+30     	; 0x692 <__addsf3x+0x80>
 674:	1f 16       	cp	r1, r31
 676:	ba 0b       	sbc	r27, r26
 678:	62 0b       	sbc	r22, r18
 67a:	73 0b       	sbc	r23, r19
 67c:	84 0b       	sbc	r24, r20
 67e:	ba f0       	brmi	.+46     	; 0x6ae <__addsf3x+0x9c>
 680:	91 50       	subi	r25, 0x01	; 1
 682:	a1 f0       	breq	.+40     	; 0x6ac <__addsf3x+0x9a>
 684:	ff 0f       	add	r31, r31
 686:	bb 1f       	adc	r27, r27
 688:	66 1f       	adc	r22, r22
 68a:	77 1f       	adc	r23, r23
 68c:	88 1f       	adc	r24, r24
 68e:	c2 f7       	brpl	.-16     	; 0x680 <__addsf3x+0x6e>
 690:	0e c0       	rjmp	.+28     	; 0x6ae <__addsf3x+0x9c>
 692:	ba 0f       	add	r27, r26
 694:	62 1f       	adc	r22, r18
 696:	73 1f       	adc	r23, r19
 698:	84 1f       	adc	r24, r20
 69a:	48 f4       	brcc	.+18     	; 0x6ae <__addsf3x+0x9c>
 69c:	87 95       	ror	r24
 69e:	77 95       	ror	r23
 6a0:	67 95       	ror	r22
 6a2:	b7 95       	ror	r27
 6a4:	f7 95       	ror	r31
 6a6:	9e 3f       	cpi	r25, 0xFE	; 254
 6a8:	08 f0       	brcs	.+2      	; 0x6ac <__addsf3x+0x9a>
 6aa:	b0 cf       	rjmp	.-160    	; 0x60c <__addsf3+0x28>
 6ac:	93 95       	inc	r25
 6ae:	88 0f       	add	r24, r24
 6b0:	08 f0       	brcs	.+2      	; 0x6b4 <__addsf3x+0xa2>
 6b2:	99 27       	eor	r25, r25
 6b4:	ee 0f       	add	r30, r30
 6b6:	97 95       	ror	r25
 6b8:	87 95       	ror	r24
 6ba:	08 95       	ret

000006bc <__divsf3>:
 6bc:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__divsf3x>
 6c0:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_round>
 6c4:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_pscB>
 6c8:	58 f0       	brcs	.+22     	; 0x6e0 <__divsf3+0x24>
 6ca:	0e 94 45 04 	call	0x88a	; 0x88a <__fp_pscA>
 6ce:	40 f0       	brcs	.+16     	; 0x6e0 <__divsf3+0x24>
 6d0:	29 f4       	brne	.+10     	; 0x6dc <__divsf3+0x20>
 6d2:	5f 3f       	cpi	r21, 0xFF	; 255
 6d4:	29 f0       	breq	.+10     	; 0x6e0 <__divsf3+0x24>
 6d6:	0c 94 3c 04 	jmp	0x878	; 0x878 <__fp_inf>
 6da:	51 11       	cpse	r21, r1
 6dc:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_szero>
 6e0:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_nan>

000006e4 <__divsf3x>:
 6e4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_split3>
 6e8:	68 f3       	brcs	.-38     	; 0x6c4 <__divsf3+0x8>

000006ea <__divsf3_pse>:
 6ea:	99 23       	and	r25, r25
 6ec:	b1 f3       	breq	.-20     	; 0x6da <__divsf3+0x1e>
 6ee:	55 23       	and	r21, r21
 6f0:	91 f3       	breq	.-28     	; 0x6d6 <__divsf3+0x1a>
 6f2:	95 1b       	sub	r25, r21
 6f4:	55 0b       	sbc	r21, r21
 6f6:	bb 27       	eor	r27, r27
 6f8:	aa 27       	eor	r26, r26
 6fa:	62 17       	cp	r22, r18
 6fc:	73 07       	cpc	r23, r19
 6fe:	84 07       	cpc	r24, r20
 700:	38 f0       	brcs	.+14     	; 0x710 <__divsf3_pse+0x26>
 702:	9f 5f       	subi	r25, 0xFF	; 255
 704:	5f 4f       	sbci	r21, 0xFF	; 255
 706:	22 0f       	add	r18, r18
 708:	33 1f       	adc	r19, r19
 70a:	44 1f       	adc	r20, r20
 70c:	aa 1f       	adc	r26, r26
 70e:	a9 f3       	breq	.-22     	; 0x6fa <__divsf3_pse+0x10>
 710:	35 d0       	rcall	.+106    	; 0x77c <__divsf3_pse+0x92>
 712:	0e 2e       	mov	r0, r30
 714:	3a f0       	brmi	.+14     	; 0x724 <__divsf3_pse+0x3a>
 716:	e0 e8       	ldi	r30, 0x80	; 128
 718:	32 d0       	rcall	.+100    	; 0x77e <__divsf3_pse+0x94>
 71a:	91 50       	subi	r25, 0x01	; 1
 71c:	50 40       	sbci	r21, 0x00	; 0
 71e:	e6 95       	lsr	r30
 720:	00 1c       	adc	r0, r0
 722:	ca f7       	brpl	.-14     	; 0x716 <__divsf3_pse+0x2c>
 724:	2b d0       	rcall	.+86     	; 0x77c <__divsf3_pse+0x92>
 726:	fe 2f       	mov	r31, r30
 728:	29 d0       	rcall	.+82     	; 0x77c <__divsf3_pse+0x92>
 72a:	66 0f       	add	r22, r22
 72c:	77 1f       	adc	r23, r23
 72e:	88 1f       	adc	r24, r24
 730:	bb 1f       	adc	r27, r27
 732:	26 17       	cp	r18, r22
 734:	37 07       	cpc	r19, r23
 736:	48 07       	cpc	r20, r24
 738:	ab 07       	cpc	r26, r27
 73a:	b0 e8       	ldi	r27, 0x80	; 128
 73c:	09 f0       	breq	.+2      	; 0x740 <__divsf3_pse+0x56>
 73e:	bb 0b       	sbc	r27, r27
 740:	80 2d       	mov	r24, r0
 742:	bf 01       	movw	r22, r30
 744:	ff 27       	eor	r31, r31
 746:	93 58       	subi	r25, 0x83	; 131
 748:	5f 4f       	sbci	r21, 0xFF	; 255
 74a:	3a f0       	brmi	.+14     	; 0x75a <__divsf3_pse+0x70>
 74c:	9e 3f       	cpi	r25, 0xFE	; 254
 74e:	51 05       	cpc	r21, r1
 750:	78 f0       	brcs	.+30     	; 0x770 <__divsf3_pse+0x86>
 752:	0c 94 3c 04 	jmp	0x878	; 0x878 <__fp_inf>
 756:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_szero>
 75a:	5f 3f       	cpi	r21, 0xFF	; 255
 75c:	e4 f3       	brlt	.-8      	; 0x756 <__divsf3_pse+0x6c>
 75e:	98 3e       	cpi	r25, 0xE8	; 232
 760:	d4 f3       	brlt	.-12     	; 0x756 <__divsf3_pse+0x6c>
 762:	86 95       	lsr	r24
 764:	77 95       	ror	r23
 766:	67 95       	ror	r22
 768:	b7 95       	ror	r27
 76a:	f7 95       	ror	r31
 76c:	9f 5f       	subi	r25, 0xFF	; 255
 76e:	c9 f7       	brne	.-14     	; 0x762 <__divsf3_pse+0x78>
 770:	88 0f       	add	r24, r24
 772:	91 1d       	adc	r25, r1
 774:	96 95       	lsr	r25
 776:	87 95       	ror	r24
 778:	97 f9       	bld	r25, 7
 77a:	08 95       	ret
 77c:	e1 e0       	ldi	r30, 0x01	; 1
 77e:	66 0f       	add	r22, r22
 780:	77 1f       	adc	r23, r23
 782:	88 1f       	adc	r24, r24
 784:	bb 1f       	adc	r27, r27
 786:	62 17       	cp	r22, r18
 788:	73 07       	cpc	r23, r19
 78a:	84 07       	cpc	r24, r20
 78c:	ba 07       	cpc	r27, r26
 78e:	20 f0       	brcs	.+8      	; 0x798 <__divsf3_pse+0xae>
 790:	62 1b       	sub	r22, r18
 792:	73 0b       	sbc	r23, r19
 794:	84 0b       	sbc	r24, r20
 796:	ba 0b       	sbc	r27, r26
 798:	ee 1f       	adc	r30, r30
 79a:	88 f7       	brcc	.-30     	; 0x77e <__divsf3_pse+0x94>
 79c:	e0 95       	com	r30
 79e:	08 95       	ret

000007a0 <__fixunssfsi>:
 7a0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__fp_splitA>
 7a4:	88 f0       	brcs	.+34     	; 0x7c8 <__fixunssfsi+0x28>
 7a6:	9f 57       	subi	r25, 0x7F	; 127
 7a8:	98 f0       	brcs	.+38     	; 0x7d0 <__fixunssfsi+0x30>
 7aa:	b9 2f       	mov	r27, r25
 7ac:	99 27       	eor	r25, r25
 7ae:	b7 51       	subi	r27, 0x17	; 23
 7b0:	b0 f0       	brcs	.+44     	; 0x7de <__fixunssfsi+0x3e>
 7b2:	e1 f0       	breq	.+56     	; 0x7ec <__fixunssfsi+0x4c>
 7b4:	66 0f       	add	r22, r22
 7b6:	77 1f       	adc	r23, r23
 7b8:	88 1f       	adc	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	1a f0       	brmi	.+6      	; 0x7c4 <__fixunssfsi+0x24>
 7be:	ba 95       	dec	r27
 7c0:	c9 f7       	brne	.-14     	; 0x7b4 <__fixunssfsi+0x14>
 7c2:	14 c0       	rjmp	.+40     	; 0x7ec <__fixunssfsi+0x4c>
 7c4:	b1 30       	cpi	r27, 0x01	; 1
 7c6:	91 f0       	breq	.+36     	; 0x7ec <__fixunssfsi+0x4c>
 7c8:	0e 94 86 04 	call	0x90c	; 0x90c <__fp_zero>
 7cc:	b1 e0       	ldi	r27, 0x01	; 1
 7ce:	08 95       	ret
 7d0:	0c 94 86 04 	jmp	0x90c	; 0x90c <__fp_zero>
 7d4:	67 2f       	mov	r22, r23
 7d6:	78 2f       	mov	r23, r24
 7d8:	88 27       	eor	r24, r24
 7da:	b8 5f       	subi	r27, 0xF8	; 248
 7dc:	39 f0       	breq	.+14     	; 0x7ec <__fixunssfsi+0x4c>
 7de:	b9 3f       	cpi	r27, 0xF9	; 249
 7e0:	cc f3       	brlt	.-14     	; 0x7d4 <__fixunssfsi+0x34>
 7e2:	86 95       	lsr	r24
 7e4:	77 95       	ror	r23
 7e6:	67 95       	ror	r22
 7e8:	b3 95       	inc	r27
 7ea:	d9 f7       	brne	.-10     	; 0x7e2 <__fixunssfsi+0x42>
 7ec:	3e f4       	brtc	.+14     	; 0x7fc <__fixunssfsi+0x5c>
 7ee:	90 95       	com	r25
 7f0:	80 95       	com	r24
 7f2:	70 95       	com	r23
 7f4:	61 95       	neg	r22
 7f6:	7f 4f       	sbci	r23, 0xFF	; 255
 7f8:	8f 4f       	sbci	r24, 0xFF	; 255
 7fa:	9f 4f       	sbci	r25, 0xFF	; 255
 7fc:	08 95       	ret

000007fe <__floatunsisf>:
 7fe:	e8 94       	clt
 800:	09 c0       	rjmp	.+18     	; 0x814 <__floatsisf+0x12>

00000802 <__floatsisf>:
 802:	97 fb       	bst	r25, 7
 804:	3e f4       	brtc	.+14     	; 0x814 <__floatsisf+0x12>
 806:	90 95       	com	r25
 808:	80 95       	com	r24
 80a:	70 95       	com	r23
 80c:	61 95       	neg	r22
 80e:	7f 4f       	sbci	r23, 0xFF	; 255
 810:	8f 4f       	sbci	r24, 0xFF	; 255
 812:	9f 4f       	sbci	r25, 0xFF	; 255
 814:	99 23       	and	r25, r25
 816:	a9 f0       	breq	.+42     	; 0x842 <__floatsisf+0x40>
 818:	f9 2f       	mov	r31, r25
 81a:	96 e9       	ldi	r25, 0x96	; 150
 81c:	bb 27       	eor	r27, r27
 81e:	93 95       	inc	r25
 820:	f6 95       	lsr	r31
 822:	87 95       	ror	r24
 824:	77 95       	ror	r23
 826:	67 95       	ror	r22
 828:	b7 95       	ror	r27
 82a:	f1 11       	cpse	r31, r1
 82c:	f8 cf       	rjmp	.-16     	; 0x81e <__floatsisf+0x1c>
 82e:	fa f4       	brpl	.+62     	; 0x86e <__floatsisf+0x6c>
 830:	bb 0f       	add	r27, r27
 832:	11 f4       	brne	.+4      	; 0x838 <__floatsisf+0x36>
 834:	60 ff       	sbrs	r22, 0
 836:	1b c0       	rjmp	.+54     	; 0x86e <__floatsisf+0x6c>
 838:	6f 5f       	subi	r22, 0xFF	; 255
 83a:	7f 4f       	sbci	r23, 0xFF	; 255
 83c:	8f 4f       	sbci	r24, 0xFF	; 255
 83e:	9f 4f       	sbci	r25, 0xFF	; 255
 840:	16 c0       	rjmp	.+44     	; 0x86e <__floatsisf+0x6c>
 842:	88 23       	and	r24, r24
 844:	11 f0       	breq	.+4      	; 0x84a <__floatsisf+0x48>
 846:	96 e9       	ldi	r25, 0x96	; 150
 848:	11 c0       	rjmp	.+34     	; 0x86c <__floatsisf+0x6a>
 84a:	77 23       	and	r23, r23
 84c:	21 f0       	breq	.+8      	; 0x856 <__floatsisf+0x54>
 84e:	9e e8       	ldi	r25, 0x8E	; 142
 850:	87 2f       	mov	r24, r23
 852:	76 2f       	mov	r23, r22
 854:	05 c0       	rjmp	.+10     	; 0x860 <__floatsisf+0x5e>
 856:	66 23       	and	r22, r22
 858:	71 f0       	breq	.+28     	; 0x876 <__floatsisf+0x74>
 85a:	96 e8       	ldi	r25, 0x86	; 134
 85c:	86 2f       	mov	r24, r22
 85e:	70 e0       	ldi	r23, 0x00	; 0
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	2a f0       	brmi	.+10     	; 0x86e <__floatsisf+0x6c>
 864:	9a 95       	dec	r25
 866:	66 0f       	add	r22, r22
 868:	77 1f       	adc	r23, r23
 86a:	88 1f       	adc	r24, r24
 86c:	da f7       	brpl	.-10     	; 0x864 <__floatsisf+0x62>
 86e:	88 0f       	add	r24, r24
 870:	96 95       	lsr	r25
 872:	87 95       	ror	r24
 874:	97 f9       	bld	r25, 7
 876:	08 95       	ret

00000878 <__fp_inf>:
 878:	97 f9       	bld	r25, 7
 87a:	9f 67       	ori	r25, 0x7F	; 127
 87c:	80 e8       	ldi	r24, 0x80	; 128
 87e:	70 e0       	ldi	r23, 0x00	; 0
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	08 95       	ret

00000884 <__fp_nan>:
 884:	9f ef       	ldi	r25, 0xFF	; 255
 886:	80 ec       	ldi	r24, 0xC0	; 192
 888:	08 95       	ret

0000088a <__fp_pscA>:
 88a:	00 24       	eor	r0, r0
 88c:	0a 94       	dec	r0
 88e:	16 16       	cp	r1, r22
 890:	17 06       	cpc	r1, r23
 892:	18 06       	cpc	r1, r24
 894:	09 06       	cpc	r0, r25
 896:	08 95       	ret

00000898 <__fp_pscB>:
 898:	00 24       	eor	r0, r0
 89a:	0a 94       	dec	r0
 89c:	12 16       	cp	r1, r18
 89e:	13 06       	cpc	r1, r19
 8a0:	14 06       	cpc	r1, r20
 8a2:	05 06       	cpc	r0, r21
 8a4:	08 95       	ret

000008a6 <__fp_round>:
 8a6:	09 2e       	mov	r0, r25
 8a8:	03 94       	inc	r0
 8aa:	00 0c       	add	r0, r0
 8ac:	11 f4       	brne	.+4      	; 0x8b2 <__fp_round+0xc>
 8ae:	88 23       	and	r24, r24
 8b0:	52 f0       	brmi	.+20     	; 0x8c6 <__fp_round+0x20>
 8b2:	bb 0f       	add	r27, r27
 8b4:	40 f4       	brcc	.+16     	; 0x8c6 <__fp_round+0x20>
 8b6:	bf 2b       	or	r27, r31
 8b8:	11 f4       	brne	.+4      	; 0x8be <__fp_round+0x18>
 8ba:	60 ff       	sbrs	r22, 0
 8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__fp_round+0x20>
 8be:	6f 5f       	subi	r22, 0xFF	; 255
 8c0:	7f 4f       	sbci	r23, 0xFF	; 255
 8c2:	8f 4f       	sbci	r24, 0xFF	; 255
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	08 95       	ret

000008c8 <__fp_split3>:
 8c8:	57 fd       	sbrc	r21, 7
 8ca:	90 58       	subi	r25, 0x80	; 128
 8cc:	44 0f       	add	r20, r20
 8ce:	55 1f       	adc	r21, r21
 8d0:	59 f0       	breq	.+22     	; 0x8e8 <__fp_splitA+0x10>
 8d2:	5f 3f       	cpi	r21, 0xFF	; 255
 8d4:	71 f0       	breq	.+28     	; 0x8f2 <__fp_splitA+0x1a>
 8d6:	47 95       	ror	r20

000008d8 <__fp_splitA>:
 8d8:	88 0f       	add	r24, r24
 8da:	97 fb       	bst	r25, 7
 8dc:	99 1f       	adc	r25, r25
 8de:	61 f0       	breq	.+24     	; 0x8f8 <__fp_splitA+0x20>
 8e0:	9f 3f       	cpi	r25, 0xFF	; 255
 8e2:	79 f0       	breq	.+30     	; 0x902 <__stack+0x3>
 8e4:	87 95       	ror	r24
 8e6:	08 95       	ret
 8e8:	12 16       	cp	r1, r18
 8ea:	13 06       	cpc	r1, r19
 8ec:	14 06       	cpc	r1, r20
 8ee:	55 1f       	adc	r21, r21
 8f0:	f2 cf       	rjmp	.-28     	; 0x8d6 <__fp_split3+0xe>
 8f2:	46 95       	lsr	r20
 8f4:	f1 df       	rcall	.-30     	; 0x8d8 <__fp_splitA>
 8f6:	08 c0       	rjmp	.+16     	; 0x908 <__stack+0x9>
 8f8:	16 16       	cp	r1, r22
 8fa:	17 06       	cpc	r1, r23
 8fc:	18 06       	cpc	r1, r24
 8fe:	99 1f       	adc	r25, r25
 900:	f1 cf       	rjmp	.-30     	; 0x8e4 <__fp_splitA+0xc>
 902:	86 95       	lsr	r24
 904:	71 05       	cpc	r23, r1
 906:	61 05       	cpc	r22, r1
 908:	08 94       	sec
 90a:	08 95       	ret

0000090c <__fp_zero>:
 90c:	e8 94       	clt

0000090e <__fp_szero>:
 90e:	bb 27       	eor	r27, r27
 910:	66 27       	eor	r22, r22
 912:	77 27       	eor	r23, r23
 914:	cb 01       	movw	r24, r22
 916:	97 f9       	bld	r25, 7
 918:	08 95       	ret

0000091a <__mulsf3>:
 91a:	0e 94 a0 04 	call	0x940	; 0x940 <__mulsf3x>
 91e:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_round>
 922:	0e 94 45 04 	call	0x88a	; 0x88a <__fp_pscA>
 926:	38 f0       	brcs	.+14     	; 0x936 <__mulsf3+0x1c>
 928:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_pscB>
 92c:	20 f0       	brcs	.+8      	; 0x936 <__mulsf3+0x1c>
 92e:	95 23       	and	r25, r21
 930:	11 f0       	breq	.+4      	; 0x936 <__mulsf3+0x1c>
 932:	0c 94 3c 04 	jmp	0x878	; 0x878 <__fp_inf>
 936:	0c 94 42 04 	jmp	0x884	; 0x884 <__fp_nan>
 93a:	11 24       	eor	r1, r1
 93c:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_szero>

00000940 <__mulsf3x>:
 940:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__fp_split3>
 944:	70 f3       	brcs	.-36     	; 0x922 <__mulsf3+0x8>

00000946 <__mulsf3_pse>:
 946:	95 9f       	mul	r25, r21
 948:	c1 f3       	breq	.-16     	; 0x93a <__mulsf3+0x20>
 94a:	95 0f       	add	r25, r21
 94c:	50 e0       	ldi	r21, 0x00	; 0
 94e:	55 1f       	adc	r21, r21
 950:	62 9f       	mul	r22, r18
 952:	f0 01       	movw	r30, r0
 954:	72 9f       	mul	r23, r18
 956:	bb 27       	eor	r27, r27
 958:	f0 0d       	add	r31, r0
 95a:	b1 1d       	adc	r27, r1
 95c:	63 9f       	mul	r22, r19
 95e:	aa 27       	eor	r26, r26
 960:	f0 0d       	add	r31, r0
 962:	b1 1d       	adc	r27, r1
 964:	aa 1f       	adc	r26, r26
 966:	64 9f       	mul	r22, r20
 968:	66 27       	eor	r22, r22
 96a:	b0 0d       	add	r27, r0
 96c:	a1 1d       	adc	r26, r1
 96e:	66 1f       	adc	r22, r22
 970:	82 9f       	mul	r24, r18
 972:	22 27       	eor	r18, r18
 974:	b0 0d       	add	r27, r0
 976:	a1 1d       	adc	r26, r1
 978:	62 1f       	adc	r22, r18
 97a:	73 9f       	mul	r23, r19
 97c:	b0 0d       	add	r27, r0
 97e:	a1 1d       	adc	r26, r1
 980:	62 1f       	adc	r22, r18
 982:	83 9f       	mul	r24, r19
 984:	a0 0d       	add	r26, r0
 986:	61 1d       	adc	r22, r1
 988:	22 1f       	adc	r18, r18
 98a:	74 9f       	mul	r23, r20
 98c:	33 27       	eor	r19, r19
 98e:	a0 0d       	add	r26, r0
 990:	61 1d       	adc	r22, r1
 992:	23 1f       	adc	r18, r19
 994:	84 9f       	mul	r24, r20
 996:	60 0d       	add	r22, r0
 998:	21 1d       	adc	r18, r1
 99a:	82 2f       	mov	r24, r18
 99c:	76 2f       	mov	r23, r22
 99e:	6a 2f       	mov	r22, r26
 9a0:	11 24       	eor	r1, r1
 9a2:	9f 57       	subi	r25, 0x7F	; 127
 9a4:	50 40       	sbci	r21, 0x00	; 0
 9a6:	9a f0       	brmi	.+38     	; 0x9ce <__mulsf3_pse+0x88>
 9a8:	f1 f0       	breq	.+60     	; 0x9e6 <__mulsf3_pse+0xa0>
 9aa:	88 23       	and	r24, r24
 9ac:	4a f0       	brmi	.+18     	; 0x9c0 <__mulsf3_pse+0x7a>
 9ae:	ee 0f       	add	r30, r30
 9b0:	ff 1f       	adc	r31, r31
 9b2:	bb 1f       	adc	r27, r27
 9b4:	66 1f       	adc	r22, r22
 9b6:	77 1f       	adc	r23, r23
 9b8:	88 1f       	adc	r24, r24
 9ba:	91 50       	subi	r25, 0x01	; 1
 9bc:	50 40       	sbci	r21, 0x00	; 0
 9be:	a9 f7       	brne	.-22     	; 0x9aa <__mulsf3_pse+0x64>
 9c0:	9e 3f       	cpi	r25, 0xFE	; 254
 9c2:	51 05       	cpc	r21, r1
 9c4:	80 f0       	brcs	.+32     	; 0x9e6 <__mulsf3_pse+0xa0>
 9c6:	0c 94 3c 04 	jmp	0x878	; 0x878 <__fp_inf>
 9ca:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_szero>
 9ce:	5f 3f       	cpi	r21, 0xFF	; 255
 9d0:	e4 f3       	brlt	.-8      	; 0x9ca <__mulsf3_pse+0x84>
 9d2:	98 3e       	cpi	r25, 0xE8	; 232
 9d4:	d4 f3       	brlt	.-12     	; 0x9ca <__mulsf3_pse+0x84>
 9d6:	86 95       	lsr	r24
 9d8:	77 95       	ror	r23
 9da:	67 95       	ror	r22
 9dc:	b7 95       	ror	r27
 9de:	f7 95       	ror	r31
 9e0:	e7 95       	ror	r30
 9e2:	9f 5f       	subi	r25, 0xFF	; 255
 9e4:	c1 f7       	brne	.-16     	; 0x9d6 <__mulsf3_pse+0x90>
 9e6:	fe 2b       	or	r31, r30
 9e8:	88 0f       	add	r24, r24
 9ea:	91 1d       	adc	r25, r1
 9ec:	96 95       	lsr	r25
 9ee:	87 95       	ror	r24
 9f0:	97 f9       	bld	r25, 7
 9f2:	08 95       	ret

000009f4 <__divmodhi4>:
 9f4:	97 fb       	bst	r25, 7
 9f6:	07 2e       	mov	r0, r23
 9f8:	16 f4       	brtc	.+4      	; 0x9fe <__divmodhi4+0xa>
 9fa:	00 94       	com	r0
 9fc:	07 d0       	rcall	.+14     	; 0xa0c <__divmodhi4_neg1>
 9fe:	77 fd       	sbrc	r23, 7
 a00:	09 d0       	rcall	.+18     	; 0xa14 <__divmodhi4_neg2>
 a02:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__udivmodhi4>
 a06:	07 fc       	sbrc	r0, 7
 a08:	05 d0       	rcall	.+10     	; 0xa14 <__divmodhi4_neg2>
 a0a:	3e f4       	brtc	.+14     	; 0xa1a <__divmodhi4_exit>

00000a0c <__divmodhi4_neg1>:
 a0c:	90 95       	com	r25
 a0e:	81 95       	neg	r24
 a10:	9f 4f       	sbci	r25, 0xFF	; 255
 a12:	08 95       	ret

00000a14 <__divmodhi4_neg2>:
 a14:	70 95       	com	r23
 a16:	61 95       	neg	r22
 a18:	7f 4f       	sbci	r23, 0xFF	; 255

00000a1a <__divmodhi4_exit>:
 a1a:	08 95       	ret

00000a1c <__udivmodhi4>:
 a1c:	aa 1b       	sub	r26, r26
 a1e:	bb 1b       	sub	r27, r27
 a20:	51 e1       	ldi	r21, 0x11	; 17
 a22:	07 c0       	rjmp	.+14     	; 0xa32 <__udivmodhi4_ep>

00000a24 <__udivmodhi4_loop>:
 a24:	aa 1f       	adc	r26, r26
 a26:	bb 1f       	adc	r27, r27
 a28:	a6 17       	cp	r26, r22
 a2a:	b7 07       	cpc	r27, r23
 a2c:	10 f0       	brcs	.+4      	; 0xa32 <__udivmodhi4_ep>
 a2e:	a6 1b       	sub	r26, r22
 a30:	b7 0b       	sbc	r27, r23

00000a32 <__udivmodhi4_ep>:
 a32:	88 1f       	adc	r24, r24
 a34:	99 1f       	adc	r25, r25
 a36:	5a 95       	dec	r21
 a38:	a9 f7       	brne	.-22     	; 0xa24 <__udivmodhi4_loop>
 a3a:	80 95       	com	r24
 a3c:	90 95       	com	r25
 a3e:	bc 01       	movw	r22, r24
 a40:	cd 01       	movw	r24, r26
 a42:	08 95       	ret

00000a44 <atoi>:
 a44:	fc 01       	movw	r30, r24
 a46:	88 27       	eor	r24, r24
 a48:	99 27       	eor	r25, r25
 a4a:	e8 94       	clt
 a4c:	21 91       	ld	r18, Z+
 a4e:	20 32       	cpi	r18, 0x20	; 32
 a50:	e9 f3       	breq	.-6      	; 0xa4c <atoi+0x8>
 a52:	29 30       	cpi	r18, 0x09	; 9
 a54:	10 f0       	brcs	.+4      	; 0xa5a <atoi+0x16>
 a56:	2e 30       	cpi	r18, 0x0E	; 14
 a58:	c8 f3       	brcs	.-14     	; 0xa4c <atoi+0x8>
 a5a:	2b 32       	cpi	r18, 0x2B	; 43
 a5c:	41 f0       	breq	.+16     	; 0xa6e <atoi+0x2a>
 a5e:	2d 32       	cpi	r18, 0x2D	; 45
 a60:	39 f4       	brne	.+14     	; 0xa70 <atoi+0x2c>
 a62:	68 94       	set
 a64:	04 c0       	rjmp	.+8      	; 0xa6e <atoi+0x2a>
 a66:	0e 94 56 05 	call	0xaac	; 0xaac <__mulhi_const_10>
 a6a:	82 0f       	add	r24, r18
 a6c:	91 1d       	adc	r25, r1
 a6e:	21 91       	ld	r18, Z+
 a70:	20 53       	subi	r18, 0x30	; 48
 a72:	2a 30       	cpi	r18, 0x0A	; 10
 a74:	c0 f3       	brcs	.-16     	; 0xa66 <atoi+0x22>
 a76:	1e f4       	brtc	.+6      	; 0xa7e <atoi+0x3a>
 a78:	90 95       	com	r25
 a7a:	81 95       	neg	r24
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	08 95       	ret

00000a80 <itoa>:
 a80:	45 32       	cpi	r20, 0x25	; 37
 a82:	51 05       	cpc	r21, r1
 a84:	20 f4       	brcc	.+8      	; 0xa8e <itoa+0xe>
 a86:	42 30       	cpi	r20, 0x02	; 2
 a88:	10 f0       	brcs	.+4      	; 0xa8e <itoa+0xe>
 a8a:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__itoa_ncheck>
 a8e:	fb 01       	movw	r30, r22
 a90:	10 82       	st	Z, r1
 a92:	cb 01       	movw	r24, r22
 a94:	08 95       	ret

00000a96 <__itoa_ncheck>:
 a96:	bb 27       	eor	r27, r27
 a98:	4a 30       	cpi	r20, 0x0A	; 10
 a9a:	31 f4       	brne	.+12     	; 0xaa8 <__itoa_ncheck+0x12>
 a9c:	99 23       	and	r25, r25
 a9e:	22 f4       	brpl	.+8      	; 0xaa8 <__itoa_ncheck+0x12>
 aa0:	bd e2       	ldi	r27, 0x2D	; 45
 aa2:	90 95       	com	r25
 aa4:	81 95       	neg	r24
 aa6:	9f 4f       	sbci	r25, 0xFF	; 255
 aa8:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__utoa_common>

00000aac <__mulhi_const_10>:
 aac:	7a e0       	ldi	r23, 0x0A	; 10
 aae:	97 9f       	mul	r25, r23
 ab0:	90 2d       	mov	r25, r0
 ab2:	87 9f       	mul	r24, r23
 ab4:	80 2d       	mov	r24, r0
 ab6:	91 0d       	add	r25, r1
 ab8:	11 24       	eor	r1, r1
 aba:	08 95       	ret

00000abc <__utoa_ncheck>:
 abc:	bb 27       	eor	r27, r27

00000abe <__utoa_common>:
 abe:	fb 01       	movw	r30, r22
 ac0:	55 27       	eor	r21, r21
 ac2:	aa 27       	eor	r26, r26
 ac4:	88 0f       	add	r24, r24
 ac6:	99 1f       	adc	r25, r25
 ac8:	aa 1f       	adc	r26, r26
 aca:	a4 17       	cp	r26, r20
 acc:	10 f0       	brcs	.+4      	; 0xad2 <__utoa_common+0x14>
 ace:	a4 1b       	sub	r26, r20
 ad0:	83 95       	inc	r24
 ad2:	50 51       	subi	r21, 0x10	; 16
 ad4:	b9 f7       	brne	.-18     	; 0xac4 <__utoa_common+0x6>
 ad6:	a0 5d       	subi	r26, 0xD0	; 208
 ad8:	aa 33       	cpi	r26, 0x3A	; 58
 ada:	08 f0       	brcs	.+2      	; 0xade <__utoa_common+0x20>
 adc:	a9 5d       	subi	r26, 0xD9	; 217
 ade:	a1 93       	st	Z+, r26
 ae0:	00 97       	sbiw	r24, 0x00	; 0
 ae2:	79 f7       	brne	.-34     	; 0xac2 <__utoa_common+0x4>
 ae4:	b1 11       	cpse	r27, r1
 ae6:	b1 93       	st	Z+, r27
 ae8:	11 92       	st	Z+, r1
 aea:	cb 01       	movw	r24, r22
 aec:	0c 94 78 05 	jmp	0xaf0	; 0xaf0 <strrev>

00000af0 <strrev>:
 af0:	dc 01       	movw	r26, r24
 af2:	fc 01       	movw	r30, r24
 af4:	67 2f       	mov	r22, r23
 af6:	71 91       	ld	r23, Z+
 af8:	77 23       	and	r23, r23
 afa:	e1 f7       	brne	.-8      	; 0xaf4 <strrev+0x4>
 afc:	32 97       	sbiw	r30, 0x02	; 2
 afe:	04 c0       	rjmp	.+8      	; 0xb08 <strrev+0x18>
 b00:	7c 91       	ld	r23, X
 b02:	6d 93       	st	X+, r22
 b04:	70 83       	st	Z, r23
 b06:	62 91       	ld	r22, -Z
 b08:	ae 17       	cp	r26, r30
 b0a:	bf 07       	cpc	r27, r31
 b0c:	c8 f3       	brcs	.-14     	; 0xb00 <strrev+0x10>
 b0e:	08 95       	ret

00000b10 <_exit>:
 b10:	f8 94       	cli

00000b12 <__stop_program>:
 b12:	ff cf       	rjmp	.-2      	; 0xb12 <__stop_program>
