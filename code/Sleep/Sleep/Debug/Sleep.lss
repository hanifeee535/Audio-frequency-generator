
Sleep.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000512  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000512  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a8  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c6  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000374  00000000  00000000  000014a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  0000181c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fa  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000181  00000000  00000000  00001ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001e67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_1>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <main>
  8e:	0c 94 87 02 	jmp	0x50e	; 0x50e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <set_up_environment>:
#include <avr/sleep.h>

volatile uint8_t led_flag = 0x01;

//setting the gpio pins
void set_up_environment (){
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
		DDRB = 0b00000001; //Defining pin 0 of port B as output
  9e:	84 e2       	ldi	r24, 0x24	; 36
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
		PORTB = 0b00000001; //setting pin 0 of port B as high
  a8:	85 e2       	ldi	r24, 0x25	; 37
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
		
		DDRD &= 0b11111011; //defining pin 2 of port D as input
  b2:	8a e2       	ldi	r24, 0x2A	; 42
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	2a e2       	ldi	r18, 0x2A	; 42
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	f9 01       	movw	r30, r18
  bc:	20 81       	ld	r18, Z
  be:	2b 7f       	andi	r18, 0xFB	; 251
  c0:	fc 01       	movw	r30, r24
  c2:	20 83       	st	Z, r18
		//PORTD = 0b00000100; //enabling internal pull up resistor
	
}
  c4:	00 00       	nop
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

000000cc <setting_interrupt>:

//setting the interrupt for falling edge 
void setting_interrupt (){
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
	EICRA |= (1<<ISC01); // Trigger into falling edge
  d4:	89 e6       	ldi	r24, 0x69	; 105
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	29 e6       	ldi	r18, 0x69	; 105
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	f9 01       	movw	r30, r18
  de:	20 81       	ld	r18, Z
  e0:	22 60       	ori	r18, 0x02	; 2
  e2:	fc 01       	movw	r30, r24
  e4:	20 83       	st	Z, r18
	EIMSK |= (1<<INT0); //enabling interrupt INT0 ;
  e6:	8d e3       	ldi	r24, 0x3D	; 61
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	2d e3       	ldi	r18, 0x3D	; 61
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	f9 01       	movw	r30, r18
  f0:	20 81       	ld	r18, Z
  f2:	21 60       	ori	r18, 0x01	; 1
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18
	sei(); //enabling global interrupt
  f8:	78 94       	sei
}
  fa:	00 00       	nop
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <toggle_led>:

//LED indicator
void toggle_led (){
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	2e 97       	sbiw	r28, 0x0e	; 14
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	de bf       	out	0x3e, r29	; 62
 112:	0f be       	out	0x3f, r0	; 63
 114:	cd bf       	out	0x3d, r28	; 61
	
	if (led_flag){
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	88 23       	and	r24, r24
 11c:	09 f4       	brne	.+2      	; 0x120 <toggle_led+0x1e>
 11e:	90 c0       	rjmp	.+288    	; 0x240 <toggle_led+0x13e>
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 120:	83 e5       	ldi	r24, 0x53	; 83
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	23 e5       	ldi	r18, 0x53	; 83
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	f9 01       	movw	r30, r18
 12a:	20 81       	ld	r18, Z
 12c:	21 7f       	andi	r18, 0xF1	; 241
 12e:	24 60       	ori	r18, 0x04	; 4
 130:	fc 01       	movw	r30, r24
 132:	20 83       	st	Z, r18
		sleep_enable();
 134:	83 e5       	ldi	r24, 0x53	; 83
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	23 e5       	ldi	r18, 0x53	; 83
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	f9 01       	movw	r30, r18
 13e:	20 81       	ld	r18, Z
 140:	21 60       	ori	r18, 0x01	; 1
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
		sleep_cpu(); 
 146:	88 95       	sleep
		PORTB |= (1<<0);
 148:	85 e2       	ldi	r24, 0x25	; 37
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	25 e2       	ldi	r18, 0x25	; 37
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	20 81       	ld	r18, Z
 154:	21 60       	ori	r18, 0x01	; 1
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	a8 e4       	ldi	r26, 0x48	; 72
 160:	b3 e4       	ldi	r27, 0x43	; 67
 162:	89 83       	std	Y+1, r24	; 0x01
 164:	9a 83       	std	Y+2, r25	; 0x02
 166:	ab 83       	std	Y+3, r26	; 0x03
 168:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	4a e7       	ldi	r20, 0x7A	; 122
 170:	53 e4       	ldi	r21, 0x43	; 67
 172:	69 81       	ldd	r22, Y+1	; 0x01
 174:	7a 81       	ldd	r23, Y+2	; 0x02
 176:	8b 81       	ldd	r24, Y+3	; 0x03
 178:	9c 81       	ldd	r25, Y+4	; 0x04
 17a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__mulsf3>
 17e:	dc 01       	movw	r26, r24
 180:	cb 01       	movw	r24, r22
 182:	8d 83       	std	Y+5, r24	; 0x05
 184:	9e 83       	std	Y+6, r25	; 0x06
 186:	af 83       	std	Y+7, r26	; 0x07
 188:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	40 e8       	ldi	r20, 0x80	; 128
 190:	5f e3       	ldi	r21, 0x3F	; 63
 192:	6d 81       	ldd	r22, Y+5	; 0x05
 194:	7e 81       	ldd	r23, Y+6	; 0x06
 196:	8f 81       	ldd	r24, Y+7	; 0x07
 198:	98 85       	ldd	r25, Y+8	; 0x08
 19a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__cmpsf2>
 19e:	88 23       	and	r24, r24
 1a0:	2c f4       	brge	.+10     	; 0x1ac <toggle_led+0xaa>
		__ticks = 1;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	9a 87       	std	Y+10, r25	; 0x0a
 1a8:	89 87       	std	Y+9, r24	; 0x09
 1aa:	3f c0       	rjmp	.+126    	; 0x22a <toggle_led+0x128>
	else if (__tmp > 65535)
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	3f ef       	ldi	r19, 0xFF	; 255
 1b0:	4f e7       	ldi	r20, 0x7F	; 127
 1b2:	57 e4       	ldi	r21, 0x47	; 71
 1b4:	6d 81       	ldd	r22, Y+5	; 0x05
 1b6:	7e 81       	ldd	r23, Y+6	; 0x06
 1b8:	8f 81       	ldd	r24, Y+7	; 0x07
 1ba:	98 85       	ldd	r25, Y+8	; 0x08
 1bc:	0e 94 ed 01 	call	0x3da	; 0x3da <__gesf2>
 1c0:	18 16       	cp	r1, r24
 1c2:	4c f5       	brge	.+82     	; 0x216 <toggle_led+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	40 e2       	ldi	r20, 0x20	; 32
 1ca:	51 e4       	ldi	r21, 0x41	; 65
 1cc:	69 81       	ldd	r22, Y+1	; 0x01
 1ce:	7a 81       	ldd	r23, Y+2	; 0x02
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	9c 81       	ldd	r25, Y+4	; 0x04
 1d4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__mulsf3>
 1d8:	dc 01       	movw	r26, r24
 1da:	cb 01       	movw	r24, r22
 1dc:	bc 01       	movw	r22, r24
 1de:	cd 01       	movw	r24, r26
 1e0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__fixunssfsi>
 1e4:	dc 01       	movw	r26, r24
 1e6:	cb 01       	movw	r24, r22
 1e8:	9a 87       	std	Y+10, r25	; 0x0a
 1ea:	89 87       	std	Y+9, r24	; 0x09
 1ec:	0f c0       	rjmp	.+30     	; 0x20c <toggle_led+0x10a>
 1ee:	89 e1       	ldi	r24, 0x19	; 25
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	9c 87       	std	Y+12, r25	; 0x0c
 1f4:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1f6:	8b 85       	ldd	r24, Y+11	; 0x0b
 1f8:	9c 85       	ldd	r25, Y+12	; 0x0c
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <toggle_led+0xf8>
 1fe:	9c 87       	std	Y+12, r25	; 0x0c
 200:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 202:	89 85       	ldd	r24, Y+9	; 0x09
 204:	9a 85       	ldd	r25, Y+10	; 0x0a
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	9a 87       	std	Y+10, r25	; 0x0a
 20a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 20c:	89 85       	ldd	r24, Y+9	; 0x09
 20e:	9a 85       	ldd	r25, Y+10	; 0x0a
 210:	89 2b       	or	r24, r25
 212:	69 f7       	brne	.-38     	; 0x1ee <toggle_led+0xec>
	else {
		sleep_disable();  
		PORTB &= ~(1<<0);
		}

}
 214:	27 c0       	rjmp	.+78     	; 0x264 <toggle_led+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 216:	6d 81       	ldd	r22, Y+5	; 0x05
 218:	7e 81       	ldd	r23, Y+6	; 0x06
 21a:	8f 81       	ldd	r24, Y+7	; 0x07
 21c:	98 85       	ldd	r25, Y+8	; 0x08
 21e:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__fixunssfsi>
 222:	dc 01       	movw	r26, r24
 224:	cb 01       	movw	r24, r22
 226:	9a 87       	std	Y+10, r25	; 0x0a
 228:	89 87       	std	Y+9, r24	; 0x09
 22a:	89 85       	ldd	r24, Y+9	; 0x09
 22c:	9a 85       	ldd	r25, Y+10	; 0x0a
 22e:	9e 87       	std	Y+14, r25	; 0x0e
 230:	8d 87       	std	Y+13, r24	; 0x0d
 232:	8d 85       	ldd	r24, Y+13	; 0x0d
 234:	9e 85       	ldd	r25, Y+14	; 0x0e
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <toggle_led+0x134>
 23a:	9e 87       	std	Y+14, r25	; 0x0e
 23c:	8d 87       	std	Y+13, r24	; 0x0d
 23e:	12 c0       	rjmp	.+36     	; 0x264 <toggle_led+0x162>
		sleep_cpu(); 
		PORTB |= (1<<0);
		_delay_ms(200);
	}
	else {
		sleep_disable();  
 240:	83 e5       	ldi	r24, 0x53	; 83
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	23 e5       	ldi	r18, 0x53	; 83
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	f9 01       	movw	r30, r18
 24a:	20 81       	ld	r18, Z
 24c:	2e 7f       	andi	r18, 0xFE	; 254
 24e:	fc 01       	movw	r30, r24
 250:	20 83       	st	Z, r18
		PORTB &= ~(1<<0);
 252:	85 e2       	ldi	r24, 0x25	; 37
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	25 e2       	ldi	r18, 0x25	; 37
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	f9 01       	movw	r30, r18
 25c:	20 81       	ld	r18, Z
 25e:	2e 7f       	andi	r18, 0xFE	; 254
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18
		}

}
 264:	00 00       	nop
 266:	2e 96       	adiw	r28, 0x0e	; 14
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	f8 94       	cli
 26c:	de bf       	out	0x3e, r29	; 62
 26e:	0f be       	out	0x3f, r0	; 63
 270:	cd bf       	out	0x3d, r28	; 61
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <__vector_1>:


//Interrupt handler
ISR (INT0_vect){
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
	led_flag ^= (1<<0); //toggling the interrupt flag
 294:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	89 27       	eor	r24, r25
 29c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	//PORTB ^= (1<<0); //toggling the LED in every interrupt happen
	TIFR0 = 0x00; //clearing the interrupt flag
 2a0:	85 e3       	ldi	r24, 0x35	; 53
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	fc 01       	movw	r30, r24
 2a6:	10 82       	st	Z, r1
	
}
 2a8:	00 00       	nop
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	0f 90       	pop	r0
 2b8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <main>:



int main (void){
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
	
	set_up_environment();
 2ca:	0e 94 4b 00 	call	0x96	; 0x96 <set_up_environment>
	setting_interrupt();
 2ce:	0e 94 66 00 	call	0xcc	; 0xcc <setting_interrupt>
	
	while(1){
		toggle_led();
 2d2:	0e 94 81 00 	call	0x102	; 0x102 <toggle_led>
	}
 2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <main+0x10>

000002d8 <__cmpsf2>:
 2d8:	0e 94 a0 01 	call	0x340	; 0x340 <__fp_cmp>
 2dc:	08 f4       	brcc	.+2      	; 0x2e0 <__cmpsf2+0x8>
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	08 95       	ret

000002e2 <__fixunssfsi>:
 2e2:	0e 94 cc 01 	call	0x398	; 0x398 <__fp_splitA>
 2e6:	88 f0       	brcs	.+34     	; 0x30a <__fixunssfsi+0x28>
 2e8:	9f 57       	subi	r25, 0x7F	; 127
 2ea:	98 f0       	brcs	.+38     	; 0x312 <__fixunssfsi+0x30>
 2ec:	b9 2f       	mov	r27, r25
 2ee:	99 27       	eor	r25, r25
 2f0:	b7 51       	subi	r27, 0x17	; 23
 2f2:	b0 f0       	brcs	.+44     	; 0x320 <__fixunssfsi+0x3e>
 2f4:	e1 f0       	breq	.+56     	; 0x32e <__fixunssfsi+0x4c>
 2f6:	66 0f       	add	r22, r22
 2f8:	77 1f       	adc	r23, r23
 2fa:	88 1f       	adc	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	1a f0       	brmi	.+6      	; 0x306 <__fixunssfsi+0x24>
 300:	ba 95       	dec	r27
 302:	c9 f7       	brne	.-14     	; 0x2f6 <__fixunssfsi+0x14>
 304:	14 c0       	rjmp	.+40     	; 0x32e <__fixunssfsi+0x4c>
 306:	b1 30       	cpi	r27, 0x01	; 1
 308:	91 f0       	breq	.+36     	; 0x32e <__fixunssfsi+0x4c>
 30a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__fp_zero>
 30e:	b1 e0       	ldi	r27, 0x01	; 1
 310:	08 95       	ret
 312:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__fp_zero>
 316:	67 2f       	mov	r22, r23
 318:	78 2f       	mov	r23, r24
 31a:	88 27       	eor	r24, r24
 31c:	b8 5f       	subi	r27, 0xF8	; 248
 31e:	39 f0       	breq	.+14     	; 0x32e <__fixunssfsi+0x4c>
 320:	b9 3f       	cpi	r27, 0xF9	; 249
 322:	cc f3       	brlt	.-14     	; 0x316 <__fixunssfsi+0x34>
 324:	86 95       	lsr	r24
 326:	77 95       	ror	r23
 328:	67 95       	ror	r22
 32a:	b3 95       	inc	r27
 32c:	d9 f7       	brne	.-10     	; 0x324 <__fixunssfsi+0x42>
 32e:	3e f4       	brtc	.+14     	; 0x33e <__fixunssfsi+0x5c>
 330:	90 95       	com	r25
 332:	80 95       	com	r24
 334:	70 95       	com	r23
 336:	61 95       	neg	r22
 338:	7f 4f       	sbci	r23, 0xFF	; 255
 33a:	8f 4f       	sbci	r24, 0xFF	; 255
 33c:	9f 4f       	sbci	r25, 0xFF	; 255
 33e:	08 95       	ret

00000340 <__fp_cmp>:
 340:	99 0f       	add	r25, r25
 342:	00 08       	sbc	r0, r0
 344:	55 0f       	add	r21, r21
 346:	aa 0b       	sbc	r26, r26
 348:	e0 e8       	ldi	r30, 0x80	; 128
 34a:	fe ef       	ldi	r31, 0xFE	; 254
 34c:	16 16       	cp	r1, r22
 34e:	17 06       	cpc	r1, r23
 350:	e8 07       	cpc	r30, r24
 352:	f9 07       	cpc	r31, r25
 354:	c0 f0       	brcs	.+48     	; 0x386 <__fp_cmp+0x46>
 356:	12 16       	cp	r1, r18
 358:	13 06       	cpc	r1, r19
 35a:	e4 07       	cpc	r30, r20
 35c:	f5 07       	cpc	r31, r21
 35e:	98 f0       	brcs	.+38     	; 0x386 <__fp_cmp+0x46>
 360:	62 1b       	sub	r22, r18
 362:	73 0b       	sbc	r23, r19
 364:	84 0b       	sbc	r24, r20
 366:	95 0b       	sbc	r25, r21
 368:	39 f4       	brne	.+14     	; 0x378 <__fp_cmp+0x38>
 36a:	0a 26       	eor	r0, r26
 36c:	61 f0       	breq	.+24     	; 0x386 <__fp_cmp+0x46>
 36e:	23 2b       	or	r18, r19
 370:	24 2b       	or	r18, r20
 372:	25 2b       	or	r18, r21
 374:	21 f4       	brne	.+8      	; 0x37e <__fp_cmp+0x3e>
 376:	08 95       	ret
 378:	0a 26       	eor	r0, r26
 37a:	09 f4       	brne	.+2      	; 0x37e <__fp_cmp+0x3e>
 37c:	a1 40       	sbci	r26, 0x01	; 1
 37e:	a6 95       	lsr	r26
 380:	8f ef       	ldi	r24, 0xFF	; 255
 382:	81 1d       	adc	r24, r1
 384:	81 1d       	adc	r24, r1
 386:	08 95       	ret

00000388 <__fp_split3>:
 388:	57 fd       	sbrc	r21, 7
 38a:	90 58       	subi	r25, 0x80	; 128
 38c:	44 0f       	add	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	59 f0       	breq	.+22     	; 0x3a8 <__fp_splitA+0x10>
 392:	5f 3f       	cpi	r21, 0xFF	; 255
 394:	71 f0       	breq	.+28     	; 0x3b2 <__fp_splitA+0x1a>
 396:	47 95       	ror	r20

00000398 <__fp_splitA>:
 398:	88 0f       	add	r24, r24
 39a:	97 fb       	bst	r25, 7
 39c:	99 1f       	adc	r25, r25
 39e:	61 f0       	breq	.+24     	; 0x3b8 <__fp_splitA+0x20>
 3a0:	9f 3f       	cpi	r25, 0xFF	; 255
 3a2:	79 f0       	breq	.+30     	; 0x3c2 <__fp_splitA+0x2a>
 3a4:	87 95       	ror	r24
 3a6:	08 95       	ret
 3a8:	12 16       	cp	r1, r18
 3aa:	13 06       	cpc	r1, r19
 3ac:	14 06       	cpc	r1, r20
 3ae:	55 1f       	adc	r21, r21
 3b0:	f2 cf       	rjmp	.-28     	; 0x396 <__fp_split3+0xe>
 3b2:	46 95       	lsr	r20
 3b4:	f1 df       	rcall	.-30     	; 0x398 <__fp_splitA>
 3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <__fp_splitA+0x30>
 3b8:	16 16       	cp	r1, r22
 3ba:	17 06       	cpc	r1, r23
 3bc:	18 06       	cpc	r1, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	f1 cf       	rjmp	.-30     	; 0x3a4 <__fp_splitA+0xc>
 3c2:	86 95       	lsr	r24
 3c4:	71 05       	cpc	r23, r1
 3c6:	61 05       	cpc	r22, r1
 3c8:	08 94       	sec
 3ca:	08 95       	ret

000003cc <__fp_zero>:
 3cc:	e8 94       	clt

000003ce <__fp_szero>:
 3ce:	bb 27       	eor	r27, r27
 3d0:	66 27       	eor	r22, r22
 3d2:	77 27       	eor	r23, r23
 3d4:	cb 01       	movw	r24, r22
 3d6:	97 f9       	bld	r25, 7
 3d8:	08 95       	ret

000003da <__gesf2>:
 3da:	0e 94 a0 01 	call	0x340	; 0x340 <__fp_cmp>
 3de:	08 f4       	brcc	.+2      	; 0x3e2 <__gesf2+0x8>
 3e0:	8f ef       	ldi	r24, 0xFF	; 255
 3e2:	08 95       	ret

000003e4 <__mulsf3>:
 3e4:	0e 94 05 02 	call	0x40a	; 0x40a <__mulsf3x>
 3e8:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_round>
 3ec:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__fp_pscA>
 3f0:	38 f0       	brcs	.+14     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f2:	0e 94 6f 02 	call	0x4de	; 0x4de <__fp_pscB>
 3f6:	20 f0       	brcs	.+8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f8:	95 23       	and	r25, r21
 3fa:	11 f0       	breq	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_inf>
 400:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__fp_nan>
 404:	11 24       	eor	r1, r1
 406:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__fp_szero>

0000040a <__mulsf3x>:
 40a:	0e 94 c4 01 	call	0x388	; 0x388 <__fp_split3>
 40e:	70 f3       	brcs	.-36     	; 0x3ec <__mulsf3+0x8>

00000410 <__mulsf3_pse>:
 410:	95 9f       	mul	r25, r21
 412:	c1 f3       	breq	.-16     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 414:	95 0f       	add	r25, r21
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	55 1f       	adc	r21, r21
 41a:	62 9f       	mul	r22, r18
 41c:	f0 01       	movw	r30, r0
 41e:	72 9f       	mul	r23, r18
 420:	bb 27       	eor	r27, r27
 422:	f0 0d       	add	r31, r0
 424:	b1 1d       	adc	r27, r1
 426:	63 9f       	mul	r22, r19
 428:	aa 27       	eor	r26, r26
 42a:	f0 0d       	add	r31, r0
 42c:	b1 1d       	adc	r27, r1
 42e:	aa 1f       	adc	r26, r26
 430:	64 9f       	mul	r22, r20
 432:	66 27       	eor	r22, r22
 434:	b0 0d       	add	r27, r0
 436:	a1 1d       	adc	r26, r1
 438:	66 1f       	adc	r22, r22
 43a:	82 9f       	mul	r24, r18
 43c:	22 27       	eor	r18, r18
 43e:	b0 0d       	add	r27, r0
 440:	a1 1d       	adc	r26, r1
 442:	62 1f       	adc	r22, r18
 444:	73 9f       	mul	r23, r19
 446:	b0 0d       	add	r27, r0
 448:	a1 1d       	adc	r26, r1
 44a:	62 1f       	adc	r22, r18
 44c:	83 9f       	mul	r24, r19
 44e:	a0 0d       	add	r26, r0
 450:	61 1d       	adc	r22, r1
 452:	22 1f       	adc	r18, r18
 454:	74 9f       	mul	r23, r20
 456:	33 27       	eor	r19, r19
 458:	a0 0d       	add	r26, r0
 45a:	61 1d       	adc	r22, r1
 45c:	23 1f       	adc	r18, r19
 45e:	84 9f       	mul	r24, r20
 460:	60 0d       	add	r22, r0
 462:	21 1d       	adc	r18, r1
 464:	82 2f       	mov	r24, r18
 466:	76 2f       	mov	r23, r22
 468:	6a 2f       	mov	r22, r26
 46a:	11 24       	eor	r1, r1
 46c:	9f 57       	subi	r25, 0x7F	; 127
 46e:	50 40       	sbci	r21, 0x00	; 0
 470:	9a f0       	brmi	.+38     	; 0x498 <__mulsf3_pse+0x88>
 472:	f1 f0       	breq	.+60     	; 0x4b0 <__mulsf3_pse+0xa0>
 474:	88 23       	and	r24, r24
 476:	4a f0       	brmi	.+18     	; 0x48a <__mulsf3_pse+0x7a>
 478:	ee 0f       	add	r30, r30
 47a:	ff 1f       	adc	r31, r31
 47c:	bb 1f       	adc	r27, r27
 47e:	66 1f       	adc	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	88 1f       	adc	r24, r24
 484:	91 50       	subi	r25, 0x01	; 1
 486:	50 40       	sbci	r21, 0x00	; 0
 488:	a9 f7       	brne	.-22     	; 0x474 <__mulsf3_pse+0x64>
 48a:	9e 3f       	cpi	r25, 0xFE	; 254
 48c:	51 05       	cpc	r21, r1
 48e:	80 f0       	brcs	.+32     	; 0x4b0 <__mulsf3_pse+0xa0>
 490:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_inf>
 494:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__fp_szero>
 498:	5f 3f       	cpi	r21, 0xFF	; 255
 49a:	e4 f3       	brlt	.-8      	; 0x494 <__mulsf3_pse+0x84>
 49c:	98 3e       	cpi	r25, 0xE8	; 232
 49e:	d4 f3       	brlt	.-12     	; 0x494 <__mulsf3_pse+0x84>
 4a0:	86 95       	lsr	r24
 4a2:	77 95       	ror	r23
 4a4:	67 95       	ror	r22
 4a6:	b7 95       	ror	r27
 4a8:	f7 95       	ror	r31
 4aa:	e7 95       	ror	r30
 4ac:	9f 5f       	subi	r25, 0xFF	; 255
 4ae:	c1 f7       	brne	.-16     	; 0x4a0 <__mulsf3_pse+0x90>
 4b0:	fe 2b       	or	r31, r30
 4b2:	88 0f       	add	r24, r24
 4b4:	91 1d       	adc	r25, r1
 4b6:	96 95       	lsr	r25
 4b8:	87 95       	ror	r24
 4ba:	97 f9       	bld	r25, 7
 4bc:	08 95       	ret

000004be <__fp_inf>:
 4be:	97 f9       	bld	r25, 7
 4c0:	9f 67       	ori	r25, 0x7F	; 127
 4c2:	80 e8       	ldi	r24, 0x80	; 128
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	08 95       	ret

000004ca <__fp_nan>:
 4ca:	9f ef       	ldi	r25, 0xFF	; 255
 4cc:	80 ec       	ldi	r24, 0xC0	; 192
 4ce:	08 95       	ret

000004d0 <__fp_pscA>:
 4d0:	00 24       	eor	r0, r0
 4d2:	0a 94       	dec	r0
 4d4:	16 16       	cp	r1, r22
 4d6:	17 06       	cpc	r1, r23
 4d8:	18 06       	cpc	r1, r24
 4da:	09 06       	cpc	r0, r25
 4dc:	08 95       	ret

000004de <__fp_pscB>:
 4de:	00 24       	eor	r0, r0
 4e0:	0a 94       	dec	r0
 4e2:	12 16       	cp	r1, r18
 4e4:	13 06       	cpc	r1, r19
 4e6:	14 06       	cpc	r1, r20
 4e8:	05 06       	cpc	r0, r21
 4ea:	08 95       	ret

000004ec <__fp_round>:
 4ec:	09 2e       	mov	r0, r25
 4ee:	03 94       	inc	r0
 4f0:	00 0c       	add	r0, r0
 4f2:	11 f4       	brne	.+4      	; 0x4f8 <__fp_round+0xc>
 4f4:	88 23       	and	r24, r24
 4f6:	52 f0       	brmi	.+20     	; 0x50c <__fp_round+0x20>
 4f8:	bb 0f       	add	r27, r27
 4fa:	40 f4       	brcc	.+16     	; 0x50c <__fp_round+0x20>
 4fc:	bf 2b       	or	r27, r31
 4fe:	11 f4       	brne	.+4      	; 0x504 <__fp_round+0x18>
 500:	60 ff       	sbrs	r22, 0
 502:	04 c0       	rjmp	.+8      	; 0x50c <__fp_round+0x20>
 504:	6f 5f       	subi	r22, 0xFF	; 255
 506:	7f 4f       	sbci	r23, 0xFF	; 255
 508:	8f 4f       	sbci	r24, 0xFF	; 255
 50a:	9f 4f       	sbci	r25, 0xFF	; 255
 50c:	08 95       	ret

0000050e <_exit>:
 50e:	f8 94       	cli

00000510 <__stop_program>:
 510:	ff cf       	rjmp	.-2      	; 0x510 <__stop_program>
