
delay_function_using_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b9  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000619  00000000  00000000  00000875  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024f  00000000  00000000  00000e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000010e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003be  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000014e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  78:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <set_up_environment>:

#include <avr/io.h>

void set_up_environment(){
	//data direction register
	DDRD &= ~(1<<2);  //setting port d pin 2 as input
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8b 7f       	andi	r24, 0xFB	; 251
  84:	8a b9       	out	0x0a, r24	; 10
	DDRB  |= (1<<0); //setting port b pin 0 as output
  86:	84 b1       	in	r24, 0x04	; 4
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	84 b9       	out	0x04, r24	; 4
	
	PORTB |= (1<<0); //putting port B as high initially
  8c:	85 b1       	in	r24, 0x05	; 5
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	85 b9       	out	0x05, r24	; 5
	PORTD |= (1<<2); //enabling internal pull up resistor
  92:	8b b1       	in	r24, 0x0b	; 11
  94:	84 60       	ori	r24, 0x04	; 4
  96:	8b b9       	out	0x0b, r24	; 11
  98:	08 95       	ret

0000009a <set_up_timer0>:
	
}

//delay 10 ms
void set_up_timer0 (){
	TCNT0 = 0 ; //setting initial value of tcnt0 register
  9a:	16 bc       	out	0x26, r1	; 38
	TCCR0A = 0x00; // normal waveform generation with OC0B disconnected
  9c:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05; // setting 1024 prescaler
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	85 bd       	out	0x25, r24	; 37
	while (((TIFR0 &(1<<0))) ==0); // checking if t0v0 flag is one or not
  a2:	a8 9b       	sbis	0x15, 0	; 21
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <set_up_timer0+0x8>
	TCCR0B = 0; //reseting tcc0b for next operation
  a6:	15 bc       	out	0x25, r1	; 37
	TCCR0A = 0; //reseting tccr0a for next operation
  a8:	14 bc       	out	0x24, r1	; 36
	TIFR0 =0x01; //reseting tifr0 
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	85 bb       	out	0x15, r24	; 21
  ae:	08 95       	ret

000000b0 <main>:



int main(void)
{
    set_up_environment();
  b0:	0e 94 40 00 	call	0x80	; 0x80 <set_up_environment>
    while (1) 
    {
	  PORTB ^= (1<<0);
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	89 27       	eor	r24, r25
  ba:	85 b9       	out	0x05, r24	; 5
	  set_up_timer0();
  bc:	0e 94 4d 00 	call	0x9a	; 0x9a <set_up_timer0>
  c0:	f9 cf       	rjmp	.-14     	; 0xb4 <main+0x4>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
