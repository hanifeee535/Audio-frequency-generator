
draft.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a5  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060b  00000000  00000000  00000955  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025f  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000011c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b1  00000000  00000000  000015c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001677  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  78:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <set_up_environment>:
#include <avr/interrupt.h>
#include <avr/sleep.h>

void set_up_environment() {
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	// LED pin (PB0)
	DDRB |= (1 << PB0);        // Define Pin 0 of port B as output
  88:	84 e2       	ldi	r24, 0x24	; 36
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	24 e2       	ldi	r18, 0x24	; 36
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	f9 01       	movw	r30, r18
  92:	20 81       	ld	r18, Z
  94:	21 60       	ori	r18, 0x01	; 1
  96:	fc 01       	movw	r30, r24
  98:	20 83       	st	Z, r18
	PORTB &= ~(1 << PB0);      // Set pin B0 low
  9a:	85 e2       	ldi	r24, 0x25	; 37
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	25 e2       	ldi	r18, 0x25	; 37
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	f9 01       	movw	r30, r18
  a4:	20 81       	ld	r18, Z
  a6:	2e 7f       	andi	r18, 0xFE	; 254
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18

	// Wake-up pin (PD2)
	DDRD &= ~(1 << PD2);       // Define pin 2 of port D as input
  ac:	8a e2       	ldi	r24, 0x2A	; 42
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	2a e2       	ldi	r18, 0x2A	; 42
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	20 81       	ld	r18, Z
  b8:	2b 7f       	andi	r18, 0xFB	; 251
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
	PORTD |= (1 << PD2);       // Enable internal pull-up resistor
  be:	8b e2       	ldi	r24, 0x2B	; 43
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	2b e2       	ldi	r18, 0x2B	; 43
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	f9 01       	movw	r30, r18
  c8:	20 81       	ld	r18, Z
  ca:	24 60       	ori	r18, 0x04	; 4
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18

	// Configure the interrupt for falling edge
	EICRA |= (1 << ISC01);     // Trigger on falling edge
  d0:	89 e6       	ldi	r24, 0x69	; 105
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	29 e6       	ldi	r18, 0x69	; 105
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f9 01       	movw	r30, r18
  da:	20 81       	ld	r18, Z
  dc:	22 60       	ori	r18, 0x02	; 2
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
	EIMSK |= (1 << INT0);      // Enable interrupt INT0
  e2:	8d e3       	ldi	r24, 0x3D	; 61
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	2d e3       	ldi	r18, 0x3D	; 61
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	20 81       	ld	r18, Z
  ee:	21 60       	ori	r18, 0x01	; 1
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
	sei();                     // Enable global interrupt
  f4:	78 94       	sei
}
  f6:	00 00       	nop
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <go_to_sleep>:

void go_to_sleep() {
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
	PORTB &= ~(1 << PB0);      // Turn off the LED
 106:	85 e2       	ldi	r24, 0x25	; 37
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	25 e2       	ldi	r18, 0x25	; 37
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	f9 01       	movw	r30, r18
 110:	20 81       	ld	r18, Z
 112:	2e 7f       	andi	r18, 0xFE	; 254
 114:	fc 01       	movw	r30, r24
 116:	20 83       	st	Z, r18
	sleep_enable();
 118:	83 e5       	ldi	r24, 0x53	; 83
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	23 e5       	ldi	r18, 0x53	; 83
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	f9 01       	movw	r30, r18
 122:	20 81       	ld	r18, Z
 124:	21 60       	ori	r18, 0x01	; 1
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 12a:	83 e5       	ldi	r24, 0x53	; 83
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	23 e5       	ldi	r18, 0x53	; 83
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	f9 01       	movw	r30, r18
 134:	20 81       	ld	r18, Z
 136:	21 7f       	andi	r18, 0xF1	; 241
 138:	24 60       	ori	r18, 0x04	; 4
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
	sleep_mode();
 13e:	83 e5       	ldi	r24, 0x53	; 83
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	23 e5       	ldi	r18, 0x53	; 83
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	21 60       	ori	r18, 0x01	; 1
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
 150:	88 95       	sleep
 152:	83 e5       	ldi	r24, 0x53	; 83
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	23 e5       	ldi	r18, 0x53	; 83
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	f9 01       	movw	r30, r18
 15c:	20 81       	ld	r18, Z
 15e:	2e 7f       	andi	r18, 0xFE	; 254
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
	sleep_disable();
 164:	83 e5       	ldi	r24, 0x53	; 83
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	23 e5       	ldi	r18, 0x53	; 83
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	20 81       	ld	r18, Z
 170:	2e 7f       	andi	r18, 0xFE	; 254
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
}
 176:	00 00       	nop
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <main>:

int main(void) {
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
	set_up_environment();
 186:	0e 94 40 00 	call	0x80	; 0x80 <set_up_environment>

	while (1) {
		if (!(PIND & (1 << PD3))) { // Check if the sleep pin (PD3) is low
 18a:	89 e2       	ldi	r24, 0x29	; 41
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	fc 01       	movw	r30, r24
 190:	80 81       	ld	r24, Z
 192:	88 2f       	mov	r24, r24
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	88 70       	andi	r24, 0x08	; 8
 198:	99 27       	eor	r25, r25
 19a:	89 2b       	or	r24, r25
 19c:	19 f4       	brne	.+6      	; 0x1a4 <main+0x26>
			go_to_sleep();
 19e:	0e 94 7f 00 	call	0xfe	; 0xfe <go_to_sleep>
 1a2:	f3 cf       	rjmp	.-26     	; 0x18a <main+0xc>
			} else {
			PORTB |= (1 << PB0);  // Turn on the LED
 1a4:	85 e2       	ldi	r24, 0x25	; 37
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	25 e2       	ldi	r18, 0x25	; 37
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	20 81       	ld	r18, Z
 1b0:	21 60       	ori	r18, 0x01	; 1
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18
		}
	}
 1b6:	e9 cf       	rjmp	.-46     	; 0x18a <main+0xc>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
